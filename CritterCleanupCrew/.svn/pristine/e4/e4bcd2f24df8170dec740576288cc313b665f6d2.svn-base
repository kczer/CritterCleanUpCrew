package model;





import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;

import moves.PlacingMove;
import powerups.PowerUp;
import enitities.Entity;
import enitities.FlyingUFO;
import enitities.PlayerCharacter;
import settables.Settable;
import settables.TrashCan;
import settables.UFO;
import weapons.Weapon;


public class GameState 
	implements java.io.Serializable //Hang 5/1/14
{

	public static double BUILD_TIME = 15000; //15 s
	public static double PLAY_TIME = 180000; //180 s

	
	private Field gameField;
	private Collection<Entity> entities;
	private Collection<Settable> plants;
	private Map<String, PlayerCharacter> playerCharacters;
	private int points;
	private double happiness;
	private int money;
	private Collection<PowerUp> powerUps;
	private Map<String, Integer> pointCounters;
	private Random generator;
	private Collection<Actionable> toAdd; //for further additions, not to have concurrent modification
	private boolean isBuild; //check if we are in build phase
	private long timeOfStateBeginning; //time at which the state was made
	private long prevTickTime; //time of previous tick, for attacking purposes
	private boolean attacked; //for checking if we've done the first attacking wave.
	private Collection<Position> used; //check for no overlaps when attacking
	private Map<String, Integer> placedPlantCount; //to keep track of how many times we've placed what type of plant
	
	/**
	 * No arg constructor for a GameState.
	 * Uses no arg constructors everywhere.
	 * All collections are ArrayLists/
	 * Points initially are 0.
	 * Money initially is 1000.
	 * Happiness initially is 0.5.
	 */
	public GameState(){
		gameField = new Field(); //empty field
		entities = new ArrayList<Entity>(); //no entities
		plants = new ArrayList<Settable>(); //no plants
		powerUps = new ArrayList<PowerUp>(); //no powerups
		pointCounters = new HashMap<String, Integer>(); //for keeping score
		playerCharacters = new HashMap<String, PlayerCharacter>(); //make player characters
		placedPlantCount = new HashMap<String, Integer>(); //initialize map
		
		makePlayerCharacters();
		
		points=0; //no points 
		happiness=0.5; //average happiness
		money=1000; //some money
		generator = new Random();
		toAdd = new ArrayList<Actionable>();
		isBuild = true; //we are always initially in the build phase
		timeOfStateBeginning = System.currentTimeMillis(); //begin at current time
		attacked = false;  //the first wave has not come
		
	}
	
	/**
	 * Checks if the state has come to a point,
	 * where the game can no longer continue. If it
	 * has, the method returns true.
	 */
	public boolean isEnd(){
		if (!isBuild&&money<100){  //if we have run out of money while in the active phase
			boolean haveFriendly=false;
			for (Settable i:plants){ //check every plant for friendlyness
				if (i.getNativeness()!=-2){
					haveFriendly = true; //found non enemy
					break;
				}
			}
			if (!haveFriendly) //if no friendly plants
				return true; //game over!
		}
		if (happiness<0){ //if we are unhappy
			return true;
		}
		if (happiness>1){ //if we are happy enough
			return true; 
		}
		if ((System.currentTimeMillis()-timeOfStateBeginning)> //if time elapsed is more than
			2*BUILD_TIME){ //two build phases, to give some play room
			boolean hasEnemy=false;
			for (Settable each:plants){ //for every settable
				if (each.getNativeness()==-2){ //if it's an enemy
					hasEnemy=true; //then we have enemies
					break;
				}
			}
			if(!hasEnemy){ //if we haven't found any yet
				for (Entity each:entities){ //for every entity
					if (!each.isFriendly()){ //if it isn't friednly
						hasEnemy=true; //we have enemies
						break;
					}
				}
			}
			if (!hasEnemy){ //if we STILL haven't found them, well then, oh joy, we win!
				return true;
			}
		}
		if((System.currentTimeMillis()-timeOfStateBeginning)> //if time elapsed is more than
			PLAY_TIME){ //the playing time
			return true; //the game is over
		}
		return false; //otherwise keep running
	}
	
	/**
	 * Returns whether the game resulted in a win by the enemy, by
	 * the player or neither (time ran out). 1 for player, -1 for enemy,
	 * 0 for neither.
	 */
	public int getIsWin(){
		if (!isBuild&&money<100){  //if we have run out of money while in the active phase
			boolean haveFriendly=false;
			boolean haveEnemy = false;
			for (Settable i:plants){ //check every plant for friendlyness
				if (i.getNativeness()!=-2){
					haveFriendly = true; //found non enemy
					break;
				}
				else{
					haveEnemy =  true; //found enemy
				}
			}
			if (haveEnemy^haveFriendly){ //if there is only one of them
				if (haveEnemy) //if only enemy
					return -1; //we lost
			}
		}
		if (happiness<0){ //if we are unhappy
			return -1;
		}
		if (happiness>1){ //if we are happy enough
			return 1; 
		}
		
		if ((System.currentTimeMillis()-timeOfStateBeginning)> //if time elapsed is more than
		2*BUILD_TIME){ //two build phases, to give some play room
		boolean hasEnemy=false;
			for (Settable each:plants){ //for every settable
				if (each.getNativeness()==-2){ //if it's an enemy
					hasEnemy=true; //then we have enemies
					break;
				}
			}
			if(!hasEnemy){ //if we haven't found any yet
				for (Entity each:entities){ //for every entity
					if (!each.isFriendly()){ //if it isn't friednly
						hasEnemy=true; //we have enemies
						break;
					}
				}
			}
			if (!hasEnemy){ //if we STILL haven't found them, well then, oh joy, we win!
				return 1;
			}
		}
		return 0; //ran out of time otherwise
	}
	
	/**
	 * Does a small step in changing the game state.
	 * The game state is actually static, so the method
	 * manipulates itself using moves that objects provide.
	 */
	public void tick(){
		if (!isBuild){ //if we are not in the building phase
			activeAttack();
		}else{ //if we are, check to see if we can switch
			if (System.currentTimeMillis()-timeOfStateBeginning>BUILD_TIME){
				isBuild=false;
			}
		}
		
		
		for (Iterator<Settable> iter = plants.iterator();
				iter.hasNext();){ //for every entity
			Settable cur = iter.next();
			if (cur.getHitPoints()<=0){ //if dead
				
				iter.remove(); //remove this one
				gameField.getAreaBlocks()[cur.getPosition().getIntX()][cur.getPosition().getIntY()].setEntityOnTile(null); //clear up block
				double happinessAdded = cur.getHappiness();
				happiness-=happinessAdded>0?happinessAdded:0; //subtract the happiness if was added,
															  //leave if took away
			}
			else{
				cur.doAction(this); //it should do its thing.
			}	
		}
		for (Iterator<Entity> iter = entities.iterator();
				iter.hasNext();){ //for every entity
			Entity cur = iter.next();
			if (cur.getHitPoints()<=0){ //if dead
				
				money+=cur.getParameters().get("MoneyOnDeath"); //add money for death/kill
				
				iter.remove(); //remove this one
				
			}
			else{
				cur.doAction(this); //it should do its thing.
			}	
		}
		
		for (Iterator<Actionable> iter = toAdd.iterator();
				iter.hasNext();){
			Actionable next =iter.next(); //get next
			iter.remove(); //remove from list
			if(next instanceof Settable){
				plants.add((Settable)next);
			}
			if(next instanceof Entity){
				entities.add((Entity)next);
			}
			
		}
		
		prevTickTime = System.currentTimeMillis(); //the previous tick time will be what was right now
	}

	/**
	 * Defines what happens in the active phase in addition to
	 * what can happen in the build phase. Sends out builders and
	 * powerful units once in a while, signifying the "attack".
	 */
	private void activeAttack() {
		if (!attacked){
			used = new HashSet<Position>();
			for (int i=0; i<2;i++){ //iterate over the four corners
				for (int j=0;j<2;j++){ //i is for the right-left, j is for up-down
					Position p = new Position(
							(i+generator.nextDouble())*(1.*Field.fieldWidth/2), //find a position in the 
							(j+generator.nextDouble())*(1.*Field.fieldHeight/2)); //respective quadrants
					p=findLandingPositionInProximity(p); //find a position to land in the given quadrant
					
					FlyingUFO flyer = new FlyingUFO(new Position(i*(Field.fieldWidth-1),j*(Field.fieldHeight-1))); //make a new UFO starting at a corner
					flyer.setTargetLocation(p); //tell it where to fly
					entities.add(flyer); //tell the state that something new exists
				}
			}
			attacked = true; //we have sent the first wave
			used.clear(); //don't care anymore
		}	
		
	}
	
	/**
	 * Finds an open, good location for a ufo landing, using the position given
	 * in the parameter as a starting point for searching. Cannot have anything on it,
	 * cannot be on water. Preferably, of course, to be on a hill, but that's not
	 * implemented yet.
	 */
	public Position findLandingPositionInProximity(Position startingPoint){
		int x = startingPoint.getIntX(); //get initial x
		int y = startingPoint.getIntY(); //and y

		Position attempt=null;
		
		Iterator<Position> spiralIterator = new SpiralIterator(startingPoint); //make a spiraling iterator
		while (gameField.getAreaBlocks()[x][y].isWater()|| //while wherever we are is water
				gameField.getAreaBlocks()[x][y].getEntityOnTile()!=null|| //or there is something there
				used.contains(attempt)){ //or the position has been used
			
			//keep spiraling to find a non-water block
			Position n = spiralIterator.next(); //get next
			x=n.getIntX(); //reassign
			y=n.getIntY(); //the positions
			attempt = new Position(x,y);
		}

		return new Position(x+0.5,y+0.5); //return the found coordinates, plus a shift to center on the block
	}
	
	public Field getGameField() {
		return gameField;
	}

	public Collection<Entity> getEntities() {
		return entities;
	}

	public Collection<Settable> getPlants() {
		return plants;
	}

	public int getPoints() {
		return points;
	}

	public double getHappiness() {
		return happiness;
	}

	public int getMoney() {
		return money;
	}

	public Collection<PowerUp> getPowerUps() {
		return powerUps;
	}
	
	public Random getGenerator(){
		return generator;
	}
	
	public void setHappiness(double h){
		happiness = h;
	}

	public Collection<Actionable> getToAdd(){
		return toAdd;
	}

	public void setMoney(int money) {
		this.money = money;
		
	}

	/**
	 * @see Game#tickSpeed()
	 */
	public int getTickSpeed() {
		return 25; //40 ms per tick.
	}

	/**
	 * Returns the adjustment needed to time-dependent 
	 * parameters according to the speed of the game
	 */
	public double perTickMultiplier(){
		return getTickSpeed()/1000.; //part of second
	}

	public Map<String, PlayerCharacter> getPlayerCharacters() {
		return playerCharacters;
	}
	
	/**
	 * Makes the player-controlled characters and puts them into
	 * the map of player characters.
	 */
	protected void makePlayerCharacters(){ //TODO 
		String[] characterNames ={"Elk", "Rabbit", "Squirrel", "Fox"}; //names, subject to change
		for (String name: characterNames){ //for every name of character
			Weapon w = new Weapon("StandardWeapon"); //make a new standard weapon
			PlayerCharacter  p = new PlayerCharacter(name,null); //make a new playercharacter with the given name
			w.setWielder(p); //give the weapon its wielder
			p.setCurrentWeapon(w); //give the character the weapon
			playerCharacters.put(name, p); //put the character into the map
		}
		//FIXME 
		//give the elk a fucking bazooka
		Weapon w = new Weapon("BazookaWeapon"); //make a new standard weapon
		w.setWielder(playerCharacters.get("Elk"));
		playerCharacters.get("Elk").setCurrentWeapon(w);
	}
	
	public boolean isBuild(){
		return isBuild;
	}

	public Map<String, Integer> getPlacedPlantCount() {
		return placedPlantCount;
	}

	public long getTimeOfStateBeginning() {
		return timeOfStateBeginning;
	}
	
//	public void saveGame() throws IOException{
//		 FileOutputStream fos = new FileOutputStream("tempdata.ser");
//         ObjectOutputStream oos = new ObjectOutputStream(fos);
//         
//
//	}  Hang
}
