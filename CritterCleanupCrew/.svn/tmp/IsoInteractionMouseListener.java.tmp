package listeners;

import java.awt.Cursor;
import java.awt.event.MouseEvent;

import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputListener;

import enitities.Entity;
import enitities.PlayerCharacter;
import model.Actionable;
import model.Position;
import moves.AttackMove;
import moves.MotionMove;
import moves.Move;

import settables.Settable;
import views.*;

public class IsoInteractionMouseListener extends InteractionMouseListener{

	public IsoInteractionMouseListener(GameView gameView) {
<<<<<<< .mine
		this.gameView = gameView;
		iView = (InteractionView) gameView.getSubviews().get("Interaction");
	}

	@Override
	public void mousePressed(MouseEvent event) {
		lastDragPosition = new Position(event.getX(), event.getY()); // in case
																		// we're
																		// dragging
		dragBarrierPassed = false; // we reinstall the drag barrier

		// System.out.println("CLICKED "+getClickedActionable(event));

		Actionable clicked = getClickedActionable(event);

		if (SwingUtilities.isLeftMouseButton(event)) { // if it's a left button
														// click
			if (gameView.getButtonMove() != null) { // if there is a class to
													// place
				launchButtonMove(event);

				// reset cursor
				gameView.setCursor(Cursor
						.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			} else { // I guess we want something else done?
				if (clicked != null) { // if we clicked on an object
					System.out.println(clicked);
					((InformationView) gameView.getSubviews()
							.get("Information")).setShownActionable(clicked);
				}
			}
		} else if (SwingUtilities.isRightMouseButton(event)) { // if it's right
																// mouse button
																// click.
			if (gameView.getButtonMove() != null) { // if there is a class to
													// place
				gameView.setButtonMove(null); // removing placing.

				// reset Cursor
				gameView.setCursor(Cursor
						.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			}

			if ((((InformationView) gameView.getSubviews()
					.get("Information")).getShownActionable().getName() == "Elk" || ((InformationView) gameView.getSubviews()
							.get("Information")).getShownActionable().getName() == "Rabbit" || ((InformationView) gameView.getSubviews()
									.get("Information")).getShownActionable().getName() == "Squirrel" || ((InformationView) gameView.getSubviews()
											.get("Information")).getShownActionable().getName() == "Fox")) { // if didn't click actionable
				setPlayerInMotion(event); // run
			} else { // else we did click something
				attackClick(clicked, event); // try attacking or doing whatever
			}
		}

	}

	@Override
	public void mouseReleased(MouseEvent event) {
		// System.out.println("Interaction "+"Up "+event.getX()+", "+event.getY());
		lastDragPosition = null; // definitely done dragging

	}

	@Override
	public void mouseDragged(MouseEvent event) {
		// System.out.println("Interaction "+"DRAG "+event.getX()+", "+event.getY());
		Position newPos = new Position(event.getX(), event.getY());
		if (dragBarrierPassed) { // if we've passed the drag barrier, just move
									// around freely

			iView.setOverHeadOffsetX(iView.getOverHeadOffsetX() + // standard
					lastDragPosition.getX() - // before (difference)
					event.getX()); // now

			iView.setOverHeadOffsetY(iView.getOverHeadOffsetY() + // standard
					lastDragPosition.getY() - // before (difference)
					event.getY()); // now
			lastDragPosition = newPos; // new position for pivot
		} else { // else check if we're about to pass
			dragBarrierPassed = lastDragPosition.distanceTo(newPos) > 20; // check
																			// if
																			// we've
																			// moved
																			// enough
		}

	}

	@Override
	public void mouseMoved(MouseEvent event) {
		// System.out.println("Interaction "+"MOVE "+event.getX()+", "+event.getY());

=======
		super(gameView);
>>>>>>> .r138
	}

	/**
	 * Returns the position of the event (usually click) on the InteractionView
	 * itself.
	 */
	protected Position positionOfEvent(MouseEvent event) {

		double x = iView.isoToI(event.getX() + iView.getOverHeadOffsetX(),
				event.getY() + iView.getOverHeadOffsetY());
		double y = iView.isoToJ(event.getX() + iView.getOverHeadOffsetX(),
				event.getY() + iView.getOverHeadOffsetY());

		Position pos = new Position(x, y);

		return pos;
	}
}
