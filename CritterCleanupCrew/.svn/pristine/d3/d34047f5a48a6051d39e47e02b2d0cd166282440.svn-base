package weapons;



import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import enitities.Entity;
import enitities.PlayerCharacter;
import model.Actionable;
import model.GameState;
import model.Position;


public class Weapon implements Actionable{

	Entity target;
	PlayerCharacter wielder;
	Map<String, Double> parameters;
	String nameOfWeapon;
	
	public Weapon(String nameOfWeapon){
		this.nameOfWeapon = nameOfWeapon;
	}
	
	/**
	 * Actually, scratch it, does nothing useful.
	 */
	public boolean doAction(GameState g) {
		return false;
	}

	/**
	 * Loads the parameters in a weapon-specific way and returns them in a map.
	 */
	public static Map<String, Double> loadParameters(String filename) {
		Scanner inFile;
		Map<String, Double> parameters = new HashMap<String, Double>();
		try {
			inFile = new Scanner(new File(filename));
			while (inFile.hasNextLine()){
				String line = inFile.nextLine(); //each line should contain parameter and value
				String[] param = line.split("[ ]");
				parameters.put(param[0], Double.parseDouble(param[1]));
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		}
		inFile.close();
		return parameters;
	}

	@Override
	public Position getPosition() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double getHitPoints() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setHitPoints(double number) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean forceAction(GameState g) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Map<String, Double> getParameters() {
		if (parameters==null){
			loadParameters();
		}
		return parameters;
	}
	
	public void setWielder(PlayerCharacter c){
		wielder = c;
	}

	@Override
	public String getName() {
		return nameOfWeapon;
	}

	@Override
	public void loadParameters() {
		parameters =  loadParameters("data/"+nameOfWeapon+".txt"); //load parameters
		
	}
}
		
