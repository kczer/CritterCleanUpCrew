package views;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collection;

import javax.swing.JFrame;
import javax.swing.Timer;

import animations.ExplosionAnimationImageSequence;
import settables.TrashCan;
import enitities.Entity;
import enitities.Gnome;
import model.Game;
import model.Position;
import moves.AttackMove;
import moves.Move;
import moves.PlacingMove;

public class GameFrameView extends JFrame implements KeyListener {

	final static String MAINMENUPANEL = "Main Menu";
	final static String GAMEVIEWPANEL = "GameView";
	final static String GAMEPANEL = "Main Game Menu";
	final static String HIGHSCOREPANEL = "HighScore Menu";
	final static String STORY1PANEL = "Story Panel 1";
	final static String STORY2PANEL = "Story Panel 2";
	final static String MULTIPLAYERPANEL = "Multiplayer Lobby";
	final static String HIGHSCHORE = "Highscores";
	final static String ENDGAME = "EndGameScoreBoard";
	final static String LOSEENDGAME ="LoseEndGame";
	final static String TIEENDGAME ="TieEndGame";
	final static String WINENDGAME ="WinEndGame";
	static String TUTORIALVIEW1 = "Tutorial1";
	static String TUTORIALVIEW2 = "Tutorial2";
	static String TUTORIALVIEW3 = "Tutorial3";
	static String CURRENTPANEL = MAINMENUPANEL;

	static MainMenuView mainMenuPanel;
	static GameView gameViewPanel;
	static TimeView timeDisplay;
	static StoryPanelView1 story1View;
	static StoryPanelView2 story2View;
	static MultiplayerView multiplayerView;
	static HighScoreView highscoreView;
	static EndGameView endgameView;
	static TutorialView1 tutorialView1;
	static TutorialView2 tutorialView2;
	static TutorialView3 tutorialView3;
	static LoseEndGameView loseEndgameView;
	static TieEndGameView tieEndgameView;
	static WinEndGameView winEndgameView;

	public static GameView getGamePlayPanel() {
		return gameViewPanel;
	}

	public static void setGamePlayPanel(GameView GamePlayPanel) {
		GameFrameView.gameViewPanel = GamePlayPanel;
	}

	CardLayout cardLayout;

	/*
	 * GameThread thread;
	 */

	public GameFrameView() {
		setTitle("Critter Clean Up Crew");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(1000, 700);

		cardLayout = new CardLayout();
		setLayout(cardLayout);

		mainMenuPanel = new MainMenuView();
		gameViewPanel = new GameView();
		story1View = new StoryPanelView1();
		story2View = new StoryPanelView2();
		multiplayerView = new MultiplayerView();
		highscoreView = new HighScoreView();
		endgameView = new EndGameView();
		tutorialView1 = new TutorialView1();
		tutorialView2 = new TutorialView2();
		tutorialView3 = new TutorialView3();
		loseEndgameView = new LoseEndGameView();
		tieEndgameView = new TieEndGameView();
		winEndgameView = new WinEndGameView();
		
		add(mainMenuPanel, MAINMENUPANEL);
		add(gameViewPanel, GAMEVIEWPANEL);
		add(story1View, STORY1PANEL);
		add(story2View, STORY2PANEL);
		add(multiplayerView, MULTIPLAYERPANEL);
		add(highscoreView, HIGHSCOREPANEL);
		add(endgameView, ENDGAME); 
		add(tutorialView1, TUTORIALVIEW1);
		add(tutorialView2, TUTORIALVIEW2);
		add(tutorialView3, TUTORIALVIEW3);
		add(loseEndgameView, LOSEENDGAME);
		add(tieEndgameView, TIEENDGAME);
		add(winEndgameView, WINENDGAME);

		mainMenuPanel.startGame.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), STORY1PANEL);
				CURRENTPANEL = STORY1PANEL;
				story1View.requestFocusInWindow();
				story1View.repaint();

	}
		}
		);
		
		mainMenuPanel.exit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				System.exit(0);

	}
		}
		);
		mainMenuPanel.highscores.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), HIGHSCOREPANEL);
				CURRENTPANEL = HIGHSCOREPANEL;
				highscoreView.requestFocusInWindow();
				highscoreView.repaint();

	}
		}
		);
		
		highscoreView.mainMenu.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), MAINMENUPANEL);
				CURRENTPANEL = MAINMENUPANEL;
				mainMenuPanel.requestFocusInWindow();
				mainMenuPanel.repaint();

	}
		}
		);
		mainMenuPanel.multiplayer.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), MULTIPLAYERPANEL);
				CURRENTPANEL = MULTIPLAYERPANEL;
				multiplayerView.requestFocusInWindow();
				multiplayerView.repaint();

	}
		}
		);
		
		multiplayerView.previousPanel.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), MAINMENUPANEL);
				CURRENTPANEL = MAINMENUPANEL;
				mainMenuPanel.requestFocusInWindow();
				mainMenuPanel.repaint();

	}
		}
		);
		
		story1View.nextPanel.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), STORY2PANEL);
				CURRENTPANEL = STORY2PANEL;
				story2View.requestFocusInWindow();
				story2View.repaint();

	}
		}
		);
		
		
		
		story1View.previousPanel.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), MAINMENUPANEL);
				CURRENTPANEL = MAINMENUPANEL;
				mainMenuPanel.requestFocusInWindow();
				mainMenuPanel.repaint();

	}
		}
		);
		
		story1View.skipToGame.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), TUTORIALVIEW1);
				CURRENTPANEL = TUTORIALVIEW1;
				tutorialView1.requestFocusInWindow();
				tutorialView1.repaint();
				//startGame();
				//long time,nextTick;
//				while (!gameViewPanel.getCurrentGame().getState().isEnd()){ //while game is still running
//					gameViewPanel.getCurrentGame().tick();  //let it tick 
//					gameViewPanel.repaint(); //repaint the screen
//					
//					time = System.currentTimeMillis(); //get the next
//					nextTick = time+=gameViewPanel.getCurrentGame().tickSpeed(); //when next to tick
//					while (System.currentTimeMillis()<nextTick){} //wait for the tick
//				}
			}
		});
		
		story2View.nextPanel.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), TUTORIALVIEW1);
				CURRENTPANEL = TUTORIALVIEW1;
				tutorialView1.requestFocusInWindow();
				tutorialView1.repaint();
							}
		}
		);
		
		story2View.previousPanel.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), STORY1PANEL);
				CURRENTPANEL = STORY1PANEL;
				story1View.requestFocusInWindow();
				story1View.repaint();

	}
		}
		);
		

		endgameView.mainMenu.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), MAINMENUPANEL);
				CURRENTPANEL = MAINMENUPANEL;
				mainMenuPanel.requestFocusInWindow();
				mainMenuPanel.repaint();

	}
		}
		);
		
		tutorialView1.next.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), TUTORIALVIEW2);
				CURRENTPANEL = TUTORIALVIEW2;
				tutorialView2.requestFocusInWindow();
				tutorialView2.repaint();

	}
		}
		);
		tutorialView1.skip.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(),GAMEVIEWPANEL);
				CURRENTPANEL = GAMEVIEWPANEL;
				gameViewPanel.requestFocusInWindow();
				gameViewPanel.repaint();
				startGame();

	}
		}
		);
		
		tutorialView2.skip.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(),GAMEVIEWPANEL);
				CURRENTPANEL = GAMEVIEWPANEL;
				gameViewPanel.requestFocusInWindow();
				gameViewPanel.repaint();
				startGame();

	}
		}
		);
		
		tutorialView2.next.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), TUTORIALVIEW3);
				CURRENTPANEL = TUTORIALVIEW3;
				tutorialView3.requestFocusInWindow();
				tutorialView3.repaint();

	}
		}
		);
		
		tutorialView2.previous.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), TUTORIALVIEW1);
				CURRENTPANEL = TUTORIALVIEW1;
				tutorialView1.requestFocusInWindow();
				tutorialView1.repaint();

	}
		}
		);
		
		tutorialView3.play.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(),GAMEVIEWPANEL);
				CURRENTPANEL = GAMEVIEWPANEL;
				gameViewPanel.requestFocusInWindow();
				gameViewPanel.repaint();
				startGame();

	}
		}
		);
		
		tutorialView3.previous.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), TUTORIALVIEW2);
				CURRENTPANEL = TUTORIALVIEW2;
				tutorialView2.requestFocusInWindow();
				tutorialView2.repaint();

	}
		}
		);
		
		winEndgameView.mainMenu.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), MAINMENUPANEL);
				CURRENTPANEL = MAINMENUPANEL;
				mainMenuPanel.requestFocusInWindow();
				mainMenuPanel.repaint();

	}
		});
		
		tieEndgameView.mainMenu.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), MAINMENUPANEL);
				CURRENTPANEL = MAINMENUPANEL;
				mainMenuPanel.requestFocusInWindow();
				mainMenuPanel.repaint();

	}
		});
		
		loseEndgameView.mainMenu.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), MAINMENUPANEL);
				CURRENTPANEL = MAINMENUPANEL;
				mainMenuPanel.requestFocusInWindow();
				mainMenuPanel.repaint();

	}
		});
		
		setVisible(true);
	}
		
	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * Starts the game, launches timer and so forth
	 */
	private void startGame(){
		gameViewPanel.setCurrentGame(new Game());
		Timer t = new Timer((int) (gameViewPanel
				.getCurrentGame().tickSpeed()) / 1,
				new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						if (!gameViewPanel.getCurrentGame().getState().isEnd()){ //if game hasn't ended
							gameViewPanel.getCurrentGame().tick(); //tick it
							addAnimations(gameViewPanel.getCurrentGame()); //add in the animations that were happening
							gameViewPanel.repaint(); //repaint the screen
						}
						else{
							//it's ended, so we go somewhere new and stop the timer.
							((Timer)e.getSource()).stop(); //stop the timer
							int endGame = gameViewPanel.getCurrentGame().getState().getIsWin();
							switch (endGame){
							case -1:
								cardLayout.show(getContentPane(), LOSEENDGAME); //to the main menu FIXME
								loseEndgameView.requestFocusInWindow();
								break;
							case 0:
								cardLayout.show(getContentPane(), TIEENDGAME); //to the main menu FIXME
								tieEndgameView.requestFocusInWindow();
								break;
							case 1:
								cardLayout.show(getContentPane(), WINENDGAME); //to the main menu FIXME
								winEndgameView.requestFocusInWindow();
								break;
							}

							
						}

					}

					private void addAnimations(Game currentGame) {
						Collection<Move> madeMoves = currentGame.getMadeMoves();
						for (Move m: madeMoves){ //check
							if (m instanceof AttackMove){ //if we were attacking
								if (((AttackMove)m).getAttackingWeapon().getName()=="BazookaWeapon"){ //if we attacked with a bazooka
									((InteractionView)gameViewPanel.getSubviews().get("Interaction")). //get the interaction view
									getAnimations().add( //add to the animations
											new ExplosionAnimationImageSequence( // a new explosion sequence
													gameViewPanel, //with the view
													((AttackMove) m).getTarget().getPosition())); //centered around the attacked target
								}
							}
						}
						
					}

				});
		t.start();
	}

}

	
				

			/*@Override
			public void actionPerformed(ActionEvent arg0) {
				cardLayout.show(getContentPane(), GAMEVIEWPANEL);
				CURRENTPANEL = GAMEVIEWPANEL;
				gameViewPanel.requestFocusInWindow();
				gameViewPanel.repaint();
				long nextTick;
				Timer t = new Timer((int) (nextTick = gameViewPanel
						.getCurrentGame().tickSpeed()) / 1,
						new ActionListener() {
							@Override
							public void actionPerformed(ActionEvent e) {
 								gameViewPanel.getCurrentGame().tick();
								gameViewPanel.repaint();
							}

						});
				t.start();
			}
		}
		);

		// adding all of the sub-panels to the frame with their tags
		setVisible(true);
	*/
//we use this to run the game under a listener, we need the game state to tick otherwise the screen will just pop up with no actions or movement.

	
