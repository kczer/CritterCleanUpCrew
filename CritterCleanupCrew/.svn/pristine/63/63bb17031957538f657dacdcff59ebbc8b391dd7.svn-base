package views;

import java.awt.Color;

import java.awt.Graphics;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;

import java.util.Collection;

import javax.swing.JPanel;

import enitities.Entity;
import enitities.PlayerCharacter;
import settables.Settable;

import model.Field;

public class InteractionView extends JPanel implements ComponentListener {

	int tileWidth = 25; // number of columns to be on screen
	int tileHeight = 13; // number of rows to be on screen
	
	int isoTileWidth = 100; // iso number of columns to be on screen
	int isoTileHeight = 50; // iso number of rows to be on screen

	double overHeadOffsetX = 0;
	double overHeadOffsetY = 0;

	int windowHeight = getHeight(); // FIXME do only on resize
	int windowWidth = getWidth(); // FIXME do only on resize
	int centerX = windowWidth / 2;
	int centerY = windowHeight / 2;
	int hOffset = windowHeight * (tileWidth / 2);
	int vOffset = 0;

	int viewHeight;
	int viewWidth;
	int imgHeight;
	int imgWidth;
	
	int overlayLocation;

	boolean isIso;

	GameView mainView;
	Collection<Entity> healthEntities;

	/**
	 * Constructor for the InteractionView. Takes the view which it is a part of
	 * as a parameter. Currently sets the background color to red. Sets Opacity
	 * to true.
	 */
	public InteractionView(GameView mainView) {
		super();
		this.setOpaque(true);
		this.setBackground(Color.BLACK);
		this.mainView = mainView;
		this.healthEntities = mainView.getCurrentGame().getState()
				.getEntities();
		isIso = true;
		addComponentListener(this);
	}

	public void paint(Graphics g) {
		super.paint(g); // print background and so forth

		if (isIso) {
			isoPaintField(g);
			isoPaintPlants(g);
			isoPaintEntities(g);
			isoPaintPlayerCharacters(g);
			isoPaintHealthbars(g);
			paintOverlayEffect(g);
		} else {
			paintField(g);
			paintPlants(g);
			paintEntities(g);
			paintHealthbars(g);
			paintPlayerCharacters(g);
			paintOverlayEffect(g);
		}

	}

///////////////////////////Isometric View Painting////////////////////////////////////////
	
	
	/**
	 * Paints the field, pretty much only water and dirt.
	 */
	private void isoPaintField(Graphics g) {
		Field world = mainView.getCurrentGame().getState().getGameField(); // for
																			// consise
																			// code.

		for (int col = 0; col < Field.fieldWidth; col++) { // print
																		// out
																		// field,
																		// water
																		// /
																		// dirt
			for (int row = 0; row < Field.fieldHeight; row++) {

				if (world.getAreaBlocks()[col][row].isWater()) {
					g.drawImage(
							mainView.getImages().get("isoWater"), // image
							(int) (twoDToIsoX(col, row) - overHeadOffsetX),
							(int) (twoDToIsoY(col, row) - overHeadOffsetY), // location
							isoTileWidth, isoTileHeight, // size
							null); // no observer
				} else {

					g.drawImage(
							mainView.getImages().get("isoSoil"), // image
							(int) (twoDToIsoX(col, row) - overHeadOffsetX),
							(int) (twoDToIsoY(col, row) - overHeadOffsetY), // location
							isoTileWidth, isoTileHeight, // size
							null); // no observer

				}
			}
		}
	}

	/*
	 * These two methods are what take the actual i and j position in our 2D
	 * array of blocks and converts that two a visual, isometric, representation
	 * in the view.
	 */

	private int twoDToIsoX(int x, int y) {
		int isoX;
		isoX = (int) ((x * isoTileWidth / 2) - (y * isoTileWidth / 2));
		return isoX;
	}

	private int twoDToIsoY(int x, int y) {
		int isoY;
		isoY = (int) ((x * isoTileHeight / 2) + (y * isoTileHeight / 2));
		return isoY;
	}

	/*
	 * These two methods are going to be used to convert the isometric, visual,
	 * coordinates to the coordinates within our actual field array. These would
	 * be used with the calculation of bounds for what's to be printed on screen
	 * but I haven't quite figured out their implementation yet.
	 */

	public int isoToI(double isoX, double isoY) {
		int twoDX = (int)(isoX/(isoTileWidth)+isoY/(isoTileHeight) - 0.5);
		return twoDX;
	}

	public int isoToJ(double isoX, double isoY) {
		int twoDY = (int)(isoY/(isoTileHeight) - isoX/(isoTileWidth) + 0.5);
		return twoDY;
	}

	/**
	 * Paints the plants on the field. Everything.
	 */
	private void isoPaintPlants(Graphics g) { // TODO REALLY TEMPORARY

		for (Settable cur : mainView.getCurrentGame().getState().getPlants()) {
			g.drawImage(
					mainView.getImages().get(cur.getName()), // image
					(int) (twoDToIsoX((int) cur.getPosition().getX(),
							(int) (cur.getPosition().getY())) - overHeadOffsetX),
					(int) (twoDToIsoY((int) cur.getPosition().getX(),
							(int) (cur.getPosition().getY())) - overHeadOffsetY), /*
																				 * location
																				 */
					isoTileWidth, isoTileHeight*2, // size
					null); // no observer
		}

	}

	private void isoPaintEntities(Graphics g) {


		for (Entity cur : mainView.getCurrentGame().getState().getEntities()) {
			g.drawImage(
					mainView.getImages().get(cur.getName()), // image
					(int) (twoDToIsoX((int) cur.getPosition().getX(),
							(int) (cur.getPosition().getY())) - overHeadOffsetX),
					(int) (twoDToIsoY((int) cur.getPosition().getX(),
							(int) (cur.getPosition().getY())) - overHeadOffsetY), // location
					isoTileWidth, isoTileHeight*2, // size
					null); // no observer
		}
	}
	
	private void isoPaintPlayerCharacters(Graphics g) {

		for (String curName : mainView.getCurrentGame().getState()
				.getPlayerCharacters().keySet()) {
			PlayerCharacter cur = mainView.getCurrentGame().getState()
					.getPlayerCharacters().get(curName);
			g.drawImage(
					mainView.getImages().get(cur.getName()), // image
					(int) (twoDToIsoX((int) (cur.getPosition().getX()-.5),
							(int) (cur.getPosition().getY()-.5)) - overHeadOffsetX), // 0.5
																							// for
																							// centering
							(int) (twoDToIsoY((int) (cur.getPosition().getX()-.5),
									(int) (cur.getPosition().getY()-.5)) - overHeadOffsetY), // location
					isoTileWidth, isoTileHeight*2, // size
					null); // no observer
		}
	}
	
	private void isoPaintHealthbars(Graphics g) {

		int hpHeight = 5; // height of HP bar
		int hpWidth = imgWidth; // width of HP bar

		for (Entity x : healthEntities) {
			double curHealth = x.getHitPoints();
			double maxHealth = x.getParameters().get("MaxHP");
			int curX = (int) (twoDToIsoX((int) (x.getPosition().getX()),
					(int) (x.getPosition().getY())) - overHeadOffsetX);
			int curY= (int) (twoDToIsoY((int) (x.getPosition().getX()),
					(int) (x.getPosition().getY())) - overHeadOffsetY);
			double hpPercent = curHealth / maxHealth;
			if (hpPercent < 0.99) {
				g.setColor(Color.RED);
				g.fillRect(curX, curY, hpWidth, hpHeight);
				g.setColor(Color.GREEN);
				g.fillRect(curX, curY, (int) (hpWidth * hpPercent), hpHeight);
			}
		}

		for (Settable x : mainView.getCurrentGame().getState().getPlants()) {
			double curHealth = x.getHitPoints();
			double maxHealth = x.getParameters().get("MaxHP");
			int curX = (int) (twoDToIsoX((int) (x.getPosition().getX()),
					(int) (x.getPosition().getY())) - overHeadOffsetX);
			int curY= (int) (twoDToIsoY((int) (x.getPosition().getX()),
					(int) (x.getPosition().getY())) - overHeadOffsetY);						// for
																						// scrolling
			double hpPercent = curHealth / maxHealth;
			if (hpPercent < 0.99) {
				g.setColor(Color.RED);
				g.fillRect(curX, curY, hpWidth, hpHeight);
				g.setColor(Color.GREEN);
				g.fillRect(curX, curY, (int) (hpWidth * hpPercent), hpHeight);
			}

		}
	}

	///////////////////////////OverHead View Painting////////////////////////////////////////
	
	
	private void paintPlants(Graphics g) { 

		for (Settable cur : mainView.getCurrentGame().getState().getPlants()) {
			g.drawImage(mainView.getImages().get(cur.getName()), // image
					
					(int) ((cur.getPosition().getX()-0.5) * imgWidth - overHeadOffsetX), //location X
					(int) ((cur.getPosition().getY()-0.5) * imgHeight - overHeadOffsetY), // location Y
					imgWidth, imgHeight, // size
					null); // no observer
		}

		/*
		 * Field field = mainView.getCurrentGame().getState().getGameField();
		 * //for consise code. // // for (int
		 * col=0;col<field.getAreaBlocks().length;col++){ // for (int
		 * row=0;row<field.getAreaBlocks()[col].length;row++){ // if
		 * (field.getAreaBlocks()[col][row].getEntityOnTile()!=null){ //
		 * System.out.print(row+" "+col); //
		 * g.drawImage(mainView.getImages().get
		 * (field.getAreaBlocks()[col][row].getEntityOnTile().getName()),
		 * //image // row*imgWidth, col*imgHeight, //location // imgWidth,
		 * imgHeight, //size // null); //no observer // } // } // }
		 */
	}

	public void paintField(Graphics g) {
		Field world = mainView.getCurrentGame().getState().getGameField();
		
		boolean elevation = true;
		
		for (int col = 0; col < Field.fieldWidth; col++) { // print
			for (int row = 0; row < Field.fieldHeight; row++) {
				if (elevation){
					if (world.getAreaBlocks()[col][row].isWater()) {

						Color c = new Color(
								0, //no red
								(int)(70*world.getAreaBlocks()[col][row].getElavation()), //some green, more in shallow
								(int)(200*(1-world.getAreaBlocks()[col][row].getElavation()))); //more blue, more in deeper
						g.setColor(c);
						g.fillRect((int) (col * imgWidth - overHeadOffsetX), 
								(int) (row * imgHeight - overHeadOffsetY), 
								imgWidth, imgHeight);

					} else {
						Color c = new Color((int)(200*world.getAreaBlocks()[col][row].getElavation()),70,0); //shade of brown
						g.setColor(c);
						g.fillRect((int) (col * imgWidth - overHeadOffsetX), 
								(int) (row * imgHeight - overHeadOffsetY), 
								imgWidth, imgHeight);


					}
				}else{
					if (world.getAreaBlocks()[col][row].isWater()) {
						g.drawImage(
								mainView.getImages().get("water"), // image
								(int) (col * imgWidth - overHeadOffsetX),
								(int) (row * imgHeight - overHeadOffsetY), // location
								imgWidth, imgHeight, // size
								null); // no observer
					}else {
						g.drawImage(
								mainView.getImages().get("dirt"), // image
								(int) (col * imgWidth - overHeadOffsetX),
								(int) (row * imgHeight - overHeadOffsetY), // location
								imgWidth, imgHeight, // size
								null); // no observer
					}
				}
			}
		}
	}

	private void paintEntities(Graphics g) {

		int imgHeight = viewHeight / tileHeight;
		int imgWidth = viewWidth / tileWidth;

		for (Entity cur : mainView.getCurrentGame().getState().getEntities()) {
			g.drawImage(
					mainView.getImages().get(cur.getName()), // image
					(int) ((cur.getPosition().getX() - 0.5) * imgWidth - overHeadOffsetX), // 0.5
																							// for
																							// centering
					(int) ((cur.getPosition().getY() - 0.5) * imgHeight - overHeadOffsetY), // location
					imgWidth, imgHeight, // size
					null); // no observer
		}
	}

	private void paintHealthbars(Graphics g) {

		int hpHeight = 5; // height of HP bar
		int hpWidth = imgWidth; // width of HP bar

		for (Entity x : healthEntities) {
			double curHealth = x.getHitPoints();
			double maxHealth = x.getParameters().get("MaxHP");
			int curX = (int) (x.getPosition().getX() * imgWidth // center of
																// image
					- imgWidth / 2 // push back to corner
			- overHeadOffsetX); // offset for scrolling
			int curY = (int) (x.getPosition().getY() * imgHeight - imgHeight
					/ 2 // push back to corner
			- overHeadOffsetY); // offset for scrolling
			double hpPercent = curHealth / maxHealth;
			if (hpPercent < 0.99) {
				g.setColor(Color.RED);
				g.fillRect(curX, curY, hpWidth, hpHeight);
				g.setColor(Color.GREEN);
				g.fillRect(curX, curY, (int) (hpWidth * hpPercent), hpHeight);
			}
		}

		for (Settable x : mainView.getCurrentGame().getState().getPlants()) {
			double curHealth = x.getHitPoints();
			double maxHealth = x.getParameters().get("MaxHP");
			int curX = (int) (x.getPosition().getX() * imgWidth // center of
						-imgWidth/2 						// image
			- overHeadOffsetX); // offset for scrolling
			int curY = (int) (x.getPosition().getY() * imgHeight - imgHeight/2- overHeadOffsetY); // offset
																						// for
																						// scrolling
			double hpPercent = curHealth / maxHealth;
			if (hpPercent < 0.99) {
				g.setColor(Color.RED);
				g.fillRect(curX, curY, hpWidth, hpHeight);
				g.setColor(Color.GREEN);
				g.fillRect(curX, curY, (int) (hpWidth * hpPercent), hpHeight);
			}

		}
	}

	private void paintPlayerCharacters(Graphics g) {

		for (String curName : mainView.getCurrentGame().getState()
				.getPlayerCharacters().keySet()) {
			PlayerCharacter cur = mainView.getCurrentGame().getState()
					.getPlayerCharacters().get(curName);
			g.drawImage(
					mainView.getImages().get(cur.getName()), // image
					(int) ((cur.getPosition().getX() - 0.5) * imgWidth - overHeadOffsetX), // 0.5
																							// for
																							// centering
					(int) ((cur.getPosition().getY() - 0.5) * imgHeight - overHeadOffsetY), // location
					imgWidth, imgHeight, // size
					null); // no observer
		}
	}
	
	/*
	  This method places a moving, oversized, transparent image which has a speed and 
	  "density" based on happiness to act as another indication of happiness changing
	*/
	
	private void paintOverlayEffect(Graphics g) {
		if (mainView.getCurrentGame().getState().getHappiness() <= .15) {

			g.drawImage(mainView.getImages().get("level1SmogEffect"), // image
					overlayLocation, overlayLocation, // location
					10000, 10000, // size
					null);
			g.drawImage(mainView.getImages().get("level2SmogEffect"), // image
					overlayLocation, overlayLocation, // location
					10000, 10000, // size
					null);
			g.drawImage(mainView.getImages().get("level3SmogEffect"), // image
					overlayLocation, overlayLocation, // location
					10000, 10000, // size
					null);
			overlayLocation = overlayLocation + 9;
		}
		if (mainView.getCurrentGame().getState().getHappiness() <= .25
				&& mainView.getCurrentGame().getState().getHappiness() > .15) {

			g.drawImage(mainView.getImages().get("level3SmogEffect"), // image
					overlayLocation, overlayLocation, // location
					10000, 10000, // size
					null);
			g.drawImage(mainView.getImages().get("level2SmogEffect"), // image
					overlayLocation, overlayLocation, // location
					10000, 10000, // size
					null);
			overlayLocation = overlayLocation + 5;
		}
		if (mainView.getCurrentGame().getState().getHappiness() <= .4
				&& mainView.getCurrentGame().getState().getHappiness() > .25) {

			g.drawImage(mainView.getImages().get("level2SmogEffect"), // image
					overlayLocation, overlayLocation, // location
					10000, 10000, // size
					null);
			overlayLocation = overlayLocation + 3;
		}
		if (overlayLocation > 0) {
			overlayLocation = -5000;
		}
	}
	
	public int getBlockHeight() {
		return getHeight() / tileHeight;
	}

	public int getBlockWidth() {
		return getWidth() / tileWidth;
	}

	public boolean isIso() {
		return isIso;
	}

	public double getOverHeadOffsetX() {
		return overHeadOffsetX;
	}

	public double getOverHeadOffsetY() {
		return overHeadOffsetY;
	}

	public void setOverHeadOffsetX(double overHeadOffsetX) {
		this.overHeadOffsetX = overHeadOffsetX;
	}

	public void setOverHeadOffsetY(double overHeadOffsetY) {
		this.overHeadOffsetY = overHeadOffsetY;
	}

	@Override
	public void componentHidden(ComponentEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void componentMoved(ComponentEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void componentResized(ComponentEvent e) {
		viewHeight = getHeight();
		viewWidth = getWidth();
		imgHeight = viewHeight / tileHeight;
		imgWidth = viewWidth / tileWidth;

	}

	@Override
	public void componentShown(ComponentEvent e) {
		// TODO Auto-generated method stub

	}

	public int getTileWidth() {
		return tileWidth;
	}

	public int getTileHeight() {
		return tileHeight;
	}

	// public void addNotify(){
	// super.addNotify();
	// requestFocus();
	// }

}
