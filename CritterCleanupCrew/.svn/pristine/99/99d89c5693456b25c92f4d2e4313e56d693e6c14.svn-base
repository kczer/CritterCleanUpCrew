package settables;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import enitities.*;
import model.Block;
import model.GameState;
import model.Position;

public class EnglishIvy extends Settable {
	
	protected static Map<String, Double> parameters; //where parameters are kept.
	private boolean changedHappiness; //if it has done its happiness impact yet.
	private int totalTicks;
	
	public EnglishIvy(){
		if (parameters==null){ //if parameters have not been loaded
			parameters = Settable.loadParameters("data/English Ivy.txt"); //load them.
		}
		cost = parameters.get("Cost").intValue();
		changedHappiness = false;
		hitPoints = parameters.get("MaxHP");
		totalTicks=0;
	}
	
	@Override
	public boolean doAction(GameState g) {
		//System.out.println(ticksSinceAction+" "+ticksToNextAction);
		if (!changedHappiness){
			g.setHappiness(g.getHappiness()+parameters.get("Happiness"));
			changedHappiness=true;
		}
		ticksSinceAction++;
		totalTicks++;
		
		if (ticksSinceAction>ticksToNextAction){
			//figure out where to spawn
			double xToSpawn, yToSpawn; 
			//get raw spawn
			xToSpawn = position.getX()+g.getGenerator().nextGaussian()*parameters.get("SpawnLocSpread");
			yToSpawn = position.getY()+g.getGenerator().nextGaussian()*parameters.get("SpawnLocSpread");
			//fix the spot to be in-game
			xToSpawn = Math.abs(xToSpawn); //for below zero
			yToSpawn = Math.abs(yToSpawn); //for below zero
			if (xToSpawn>g.getGameField().getAreaBlocks()[0].length){ //for over
				xToSpawn = g.getGameField().getAreaBlocks()[0].length*2-xToSpawn;
			}
			if (yToSpawn>g.getGameField().getAreaBlocks().length){ //for over
				yToSpawn = g.getGameField().getAreaBlocks()[0].length*2-yToSpawn;
			}
			
			//make position
			Position posToSpawn = new Position(xToSpawn, yToSpawn);
			//spawn
			Entity ent = new Catterpillar(posToSpawn); //FIXME, spawn randomer?
			
			//stick in game
			g.getEntities().add(ent);
			
			ticksSinceAction=0;
			ticksToNextAction = (int) ((g.getGenerator().nextGaussian())*parameters.get("SpawnTimeSpread")+
					parameters.get("SpawnTime")); 
		}
		
		//multiply if time
		if (totalTicks%parameters.get("PlantMultiplyTime").intValue()==0){
			int xSpread = (int) (parameters.get("MultiplySpread")*((g.getGenerator().nextDouble()-0.5)*2));
			int ySpread = (int) (parameters.get("MultiplySpread")*((g.getGenerator().nextDouble()-0.5)*2));
			//System.out.println(xSpread+" "+ySpread);
			
			double xPos= position.getX()+xSpread;
			double yPos = position.getY()+ySpread;
			
			xPos = Math.abs(xPos); //for below zero
			yPos = Math.abs(yPos); //for below zero
			if (xPos>g.getGameField().getAreaBlocks()[0].length){ //for over
				xPos = g.getGameField().getAreaBlocks()[0].length*2-xPos;
			}
			if (yPos>g.getGameField().getAreaBlocks().length){ //for over
				yPos = g.getGameField().getAreaBlocks()[0].length*2-yPos;
			}
			
			Position newPlant = new Position(xPos,yPos);
			
			Block loc = g.getGameField().getAreaBlocks()[newPlant.getIntY()][newPlant.getIntX()];
			
			if (!loc.isWater()){ //if isn't water
				//expand (killing any other plant there).
				EnglishIvy np = new EnglishIvy();
				if (loc.getEntityOnTile()!=null){
					loc.getEntityOnTile().setHitPoints(-1); //kill, will get removed. If gets same location, pretty much full heal
					if (loc.getEntityOnTile() instanceof EnglishIvy){ //if it is a full heal
						np.setChangedHappiness(true); //don't take away happiness
					}
				}
				np.setPosition(newPlant);
				loc.setEntityOnTile(np); //add to tile
				g.getToAdd().add(np);
			}
			
			
		}
		return true;
	}

	@Override
	public String getName() {
		return "English Ivy";
	}

	@Override
	public int getCycleTime() {
		// TODO Auto-generated method stub
		return 0;
	}
	
	public String toString(){
		return "EnglishIvy at "+position.toString();
	}
	
	protected void setChangedHappiness(boolean i){
		changedHappiness=i;
	}
	
	public double getHappiness(){
		return parameters.get("Happiness");
	}

}
